from aiogram import F, types, Router
from aiogram.filters import CommandStart, Command, or_f
from aiogram.utils.formatting import as_list, as_marked_section, Bold  # Italic, as_numbered_list –∏ —Ç–¥
from aiogram.utils.markdown import hbold

from hub_studio.filters.chat_types import ChatTypeFilter
from hub_studio.reply import delete_kb, test_kb, get_keyboard

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.first_name)}!")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
        reply_markup=get_keyboard(
            "–ú–µ–Ω—é",
            "–û –º–∞–≥–∞–∑–∏–Ω–µ",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã",
            "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
            placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            sizes=(2, 2)
        ),
    )
    # await message.answer(f"{message}")  # –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ message
    # await message.reply(message.text)  # –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ


# @user_private_router.message(F.text.lower() == "–º–µ–Ω—é")
@user_private_router.message(or_f(Command('menu'), (F.text.lower() == "–º–µ–Ω—é")))
async def menu_cmd(message: types.Message):
    await message.answer("–í–æ—Ç –º–µ–Ω—é:", reply_markup=delete_kb)


@user_private_router.message(F.text.lower() == "–æ –º–∞–≥–∞–∑–∏–Ω–µ")
@user_private_router.message(Command('about'))
async def menu_cmd(message: types.Message):
    await message.answer("–û –Ω–∞—Å:")


@user_private_router.message(F.text.lower() == "–¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–∏")
@user_private_router.message(Command('additional functions'))
async def menu_cmd(message: types.Message):
    await message.answer("–ï—â–µ –µ—Å—Ç—å", reply_markup=test_kb)


@user_private_router.message(F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã")
@user_private_router.message(Command('payment'))
async def payment_cmd(message: types.Message):
    text = as_marked_section(
        Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:"),
        "–ö–∞—Ä—Ç–æ–π –≤ –±–æ—Ç–µ",
        "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∞/–∫–µ—à",
        "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
        marker='‚úÖ '
    )
    await message.answer(text.as_html())


# –°–∏–º–≤–æ–ª | –∑–Ω–∞—á–∏—Ç or. –°–∏–º–≤–æ–ª & –∑–Ω–∞—á–∏—Ç and
# .contains("str") —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ª–æ–≤–µ
@user_private_router.message((F.text.lower().contains("–¥–æ—Å—Ç–∞–≤–∫")) | (F.text.lower().contains("–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏")))
@user_private_router.message(Command('shipping'))
async def menu_cmd(message: types.Message):
    text = as_list(
        as_marked_section(
            Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏/–∑–∞–∫–∞–∑–∞:"),
            "–ö—É—Ä—å–µ—Ä",
            "–°–∞–º–æ –≤—ã–Ω–æ—Å (—Å–µ–π—á–∞—Å –ø—Ä–∏–±–µ–≥—É –∑–∞–±–µ—Ä—É)",
            "–ü–æ–∫—É—à–∞—é —É –í–∞—Å (—Å–µ–π—á–∞—Å –ø—Ä–∏–±–µ–≥—É)",
            marker='‚úÖ '
        ),
        as_marked_section(
            Bold("–ù–µ–ª—å–∑—è:"),
            "–ü–æ—á—Ç–∞",
            "–ì–æ–ª—É–±–∏",
            marker='‚ùå '
        ),
        sep='\n----------------------\n'
    )
    await message.answer(text.as_html())


@user_private_router.message(F.contact)
async def get_contact(message: types.Message):
    await message.answer(f"–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω")
    await message.answer(str(message.contact))


@user_private_router.message(F.location)
async def get_location(message: types.Message):
    await message.answer(f"–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await message.answer(str(message.location))


# @user_private_router.message()
# async def echo(message: types.Message):
#     try:
#         text = message.text.lower()
#         if text in ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi", "—Ö–∞–π"]:
#             await message.answer("–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!")
#         elif text in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "bya", ]:
#             await message.answer("–ò —Ç–µ–±–µ –ø–æ–∫–∞!")
#         else:
#             await message.send_copy(chat_id=message.chat.id)
#     except AttributeError:
#         await message.answer("–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! üòÄ")


# @user_private_router.message(F.photo)
# async def menu_photo(message: types.Message):
#     await message.answer("–≠—Ç–æ —Ñ–æ—Ç–æ:")
